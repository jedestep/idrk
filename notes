A = 00
C = 01
G = 10
T = 11

        1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
S       a  b  b  a  b  b  a  b  b  a  b  b  a  b  a  a  a  b  a  b  a  b  b  a  b  b  b  a  b  b  a  #
SA_0    15 16 31 13 17 19 28 10 7  4  1  21 24 32 14 30 12 18 27 9  6  3  20 23 29 11 26 8  5  2  22 25
B_0     0  1  0  0  0  0  1  1  0  1  0  0  1  1  1  1  1  1  0  0  1  0  1  0  0  0  1  1  0  1  1  0
rank_0  0  1  1  1  1  1  2  3  3  4  4  4  5  6  7  8  9  10 10 10 11 11 12 12 12 12 13 14 14 15 16 16
Psi_0   2  2  14 15 18 23 7  8  28 10 30 31 13 14 15 16 17 18 7  8  21 10 23 13 16 17 27 28 21 30 31 27

a list: 
b list:

We can pack a 4-nt sequence into one byte.
    Use this to shorten the representation of the string

Need a rank function that operates on binary arrays:
    This can be represented as a sum of the array up to a certain point
    1. Slicing the array
        n is the number of bytes in the binary array
        k < n is the bit position up to which we need to sum
            this means we need bits [0..k] inclusive
            numBytes = ceil(k/8)
    2. /*Recursive parallel*/ ITERATIVE SERIAL sum
        At 64 bits or lower, we can use a builtin instruction accessible with __builtin_popcount or __builtin_popcountll.
        We want to split the longer buffer in parallel to do this computation, OpenMP tasks should be able to do this
            Do we want to do a recursive split sum? (like mergesort?)
            Chunking the buffer into 64 bit blocks and summing them may be better though
        
1. Build a compressed suffix array
    alphabet size is S
    number of levels of compression is ceil(log(log_S(n)))
    for a particular level k:
        compute B, where B[i] = 0 if SA[i] is odd, and B[i] = 1 if SA[i] is even

2. set up a database type of system which hold several of these suffix arrays in memory
    
3. get some garbled DNA, ala metagenomics, and look for it in the database
